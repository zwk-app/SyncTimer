#file: noinspection SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection
name: Build

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: environment
        default: 'default'
      logLevel:
        description: 'Log level'
        required: true
        type: choice
        options:
          - info
          - warning
          - debug
        default: 'warning'
      print_tags:
        description: 'Use stdout'
        required: true
        type: boolean
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  linux:
    runs-on: ubuntu-latest
    steps:
      - name: "CheckOut"
        uses: actions/checkout@v4
      - name: "Go Setup"
        uses: actions/setup-go@v3
        with:
          go-version: 1.21
      - name: "Go Cache"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-golang-linux
          restore-keys: |
            ${{ runner.os }}-golang-linux
      - name: "Linux Build"
        shell: bash
        run: |
          chmod +x github.sh
          ./github.sh build-requirements
          ./github.sh package linux
      - name: "Linux Upload"
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: |
            SyncTimer.tar.xz
          retention-days: 3

  android:
    runs-on: ubuntu-latest
    steps:
      - name: "CheckOut"
        uses: actions/checkout@v4
      - name: "Go Setup"
        uses: actions/setup-go@v3
        with:
          go-version: 1.21
      - name: "Go Cache"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-golang-android
          restore-keys: |
            ${{ runner.os }}-golang-android
      - name: "Android Build"
        shell: bash
        run: |
          chmod +x github.sh
          ./github.sh build-requirements
          ./github.sh package android
      - name: "Android Upload"
        uses: actions/upload-artifact@v3
        with:
          name: android
          path: |
            SyncTimer.apk
          retention-days: 3

  windows:
    runs-on: ubuntu-latest
    steps:
      - name: "CheckOut"
        uses: actions/checkout@v4
      - name: "Go Setup"
        uses: actions/setup-go@v3
        with:
          go-version: 1.21
      - name: "Go Cache"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-golang-windows
          restore-keys: |
            ${{ runner.os }}-golang-windows
      - name: "Windows Build"
        shell: bash
        run: |
          chmod +x github.sh
          ./github.sh build-requirements
          ./github.sh package windows
      - name: "Windows Upload"
        uses: actions/upload-artifact@v3
        with:
          name: windows
          path: |
            SyncTimer.exe
          retention-days: 3

  release:
    needs: [linux, android, windows]
    runs-on: ubuntu-latest
    steps:
      - name: "CheckOut"
        uses: actions/checkout@v4
      - name: "Linux"
        uses: actions/download-artifact@v3
        with:
          name: linux
          path: |
            SyncTimer.tar.xz
      - name: "Android"
        uses: actions/download-artifact@v3
        with:
          name: android
          path: |
            SyncTimer.apk
      - name: "Windows"
        uses: actions/download-artifact@v3
        with:
          name: windows
          path: |
            SyncTimer.exe
      - name: "Prepare Release"
        shell: bash
        run: |
          mkdir release
          mv ./SyncTimer.exe/SyncTimer.exe ./release/
          mv ./SyncTimer.tar.xz/SyncTimer.tar.xz ./release/
          mv ./SyncTimer.apk/SyncTimer.apk ./release/
          chmod +x github.sh
          ./github.sh github-environment
          ./github.sh build-summary ./release/
      - name: "Create Release"
        uses: actions/github-script@v7
        with:
          github-token: "${{ secrets.GIT_BOT_TOKEN }}"
          script: |
            const fs = require('fs');
            if (!process.env.RELEASE_NAME) {
              core.setFailed("The environment variable RELEASE_NAME is not defined.")
              return;
            }
            if (!process.env.RELEASE_TAG) {
              core.setFailed("The environment variable RELEASE_TAG is not defined.")
              return;
            }
            console.log(`Repository   : '${context.repo.repo}'`);
            console.log(`Owner        : '${context.repo.owner}'`);
            console.log(`Release Name : '${process.env.RELEASE_NAME}'`);
            console.log(`Release Tag  : '${process.env.RELEASE_TAG}'`);
            try {
              const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: process.env.RELEASE_NAME,
                tag_name: process.env.RELEASE_TAG,
                generate_release_notes: true,
                prerelease: false,
                draft: true,
              });
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
              console.log(`Release Id   : '${process.env.RELEASE_ID}'`);
            } catch (error) {
              core.setFailed(`Create Release: ${error.message}`);
              return;
            }
            try {
              const result = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.RELEASE_ID,
                name: "SyncTimer.md",
                data: await fs.readFileSync("./release/SyncTimer.md")
              });
            } catch (error) {
              core.setFailed(`SyncTimer.md: ${error.message}`);
              return;
            }
            try {
              const result = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.RELEASE_ID,
                name: "SyncTimer.exe",
                data: await fs.readFileSync("./release/SyncTimer.exe")
              });
            } catch (error) {
              core.setFailed(`SyncTimer.exe: ${error.message}`);
              return;
            }
            try {
              const result = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.RELEASE_ID,
                name: "SyncTimer.tar.xz",
                data: await fs.readFileSync("./release/SyncTimer.tar.xz")
              });
            } catch (error) {
              core.setFailed(`SyncTimer.tar.xz: ${error.message}`);
              return;
            }
            try {
              const result = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.RELEASE_ID,
                name: "SyncTimer.apk",
                data: await fs.readFileSync("./release/SyncTimer.apk")
              });
            } catch (error) {
              core.setFailed(`SyncTimer.apk: ${error.message}`);
              return;
            }
      - name: "Build Summary Upload"
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: |
            ./release/SyncTimer.md
          retention-days: 3

  build-increment:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: "CheckOut"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GIT_BOT_TOKEN }}
      - name: "Git Setup"
        shell: bash
        run: |
          git config --global user.name "${{ vars.GIT_BOT_USER }}"
          git config --global user.email "${{ vars.GIT_BOT_EMAIL }}"
      - name: "Build Increment"
        shell: bash
        run: |
          chmod +x github.sh
          ./github.sh build-increment
      - name: "Commit & Push"
        shell: bash
        run: |
          git commit -a -m "Build Auto-Increment"
          git push --force
